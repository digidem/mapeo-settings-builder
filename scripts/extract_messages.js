/**
 * Accepts a map of translationable strings generated by id-presets builder and
 * generates a messages object that can be translated by CrowdIn
 *
 * @param {object} translations
 * @returns {object} Translatable messages, keys are message id, and each
 * message has a description and the message to be translated
 */
export default function extractMessages ({ categories, fields, presets }) {
  var messages = {}

  // TODO: Check category, preset and field ids for '.' which will cause
  // problems with flattening/unflattening the message ids to the nested object
  // that iD requires
  Object.keys(categories).forEach(function (id) {
    messages[`categories.${id}.name`] = categories[id].name
  })

  Object.keys(fields).forEach((id) => {
    var field = fields[id]

    messages[`fields.${id}.label`] = {
      description: `Label for field '${id}'`,
      message: field.label || ''
    }

    messages[`fields.${id}.placeholder`] = {
      description: `An example to guide the user for field '${id}'`,
      message: field.placeholder || ''
    }

    messages[`fields.${id}.helperText`] = {
      description: `Descriptive text for field '${id}'`,
      message: field.helperText || ''
    }

    Object.keys(field.options || {}).forEach((optionValue) => {
      messages[`fields.${id}.options.${optionValue}`] = {
        description: `Label for option '${optionValue}' for field '${id}'`,
        message: field.options[optionValue] || ''
      }
    })
  })

  Object.keys(presets).forEach((id) => {
    var preset = presets[id]
    messages[`presets.${id}.name`] = {
      description: `The name of preset '${id}'`,
      message: preset.name
    }
    messages[`presets.${id}.terms`] = {
      description: `List of search terms for preset '${id}'`,
      message: presets[id].terms || ''
    }
  })

  return messages
}
